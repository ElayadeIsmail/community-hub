// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String      @id @default(cuid())
  name               String?
  email              String?     @unique
  emailVerified      DateTime?
  image              String?
  password           Password?
  posts              Post[]
  joinedCommunity    Community[]
  createdCommunities Community[] @relation("Creator")
  votes              Vote[]
  comments           Comment[]
  accounts           Account[]
  sessions           Session[]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Password {
  id     String @id @default(cuid())
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Community {
  id          String   @id @default(cuid())
  description String
  title       String
  slug        String   @unique
  adminId     String
  admin       User     @relation(name: "Creator", fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  users       User[]
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     String
  authorId    String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  votes       Vote[]
  points      Int       @default(0)
  published   Boolean   @default(true)
  comments    Comment[]
  communityId String
  community   Community @relation(fields: [communityId], references: [id])
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  postId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  user      User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  parentId  String?
  parent    Comment?  @relation("Comments", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("Comments")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Vote {
  id        String   @id @default(cuid())
  value     Int
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, userId])
}
